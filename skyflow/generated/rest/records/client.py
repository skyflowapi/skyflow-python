# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.v_1_batch_operation_response import V1BatchOperationResponse
from ..types.v_1_batch_record import V1BatchRecord
from ..types.v_1_bulk_delete_record_response import V1BulkDeleteRecordResponse
from ..types.v_1_bulk_get_record_response import V1BulkGetRecordResponse
from ..types.v_1_byot import V1Byot
from ..types.v_1_delete_file_response import V1DeleteFileResponse
from ..types.v_1_delete_record_response import V1DeleteRecordResponse
from ..types.v_1_field_records import V1FieldRecords
from ..types.v_1_get_file_scan_status_response import V1GetFileScanStatusResponse
from ..types.v_1_insert_record_response import V1InsertRecordResponse
from ..types.v_1_update_record_response import V1UpdateRecordResponse
from .raw_client import AsyncRawRecordsClient, RawRecordsClient
from .types.record_service_bulk_get_record_request_order_by import RecordServiceBulkGetRecordRequestOrderBy
from .types.record_service_bulk_get_record_request_redaction import RecordServiceBulkGetRecordRequestRedaction
from .types.record_service_get_record_request_redaction import RecordServiceGetRecordRequestRedaction

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RecordsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawRecordsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawRecordsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawRecordsClient
        """
        return self._raw_client

    def record_service_batch_operation(
        self,
        vault_id: str,
        *,
        records: typing.Optional[typing.Sequence[V1BatchRecord]] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BatchOperationResponse:
        """
        Performs multiple record operations in a single transaction.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        records : typing.Optional[typing.Sequence[V1BatchRecord]]
            Record operations to perform.

        continue_on_error : typing.Optional[bool]
            Continue performing operations on partial errors.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BatchOperationResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow import V1BatchRecord
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_batch_operation(vault_id='vaultID', records=[V1BatchRecord(fields={'drivers_license_number': '89867453'
        , 'name': 'Connor'
        , 'phone_number': '8794523160'
        , 'ssn': '143-89-2306'
        }, table_name='persons', method="POST", batch_id='persons-12345', redaction="PLAIN_TEXT", tokenization=False, download_url=False, upsert='drivers_license_number', ), V1BatchRecord(table_name='persons', method="GET", batch_id='persons-12345', redaction="PLAIN_TEXT", tokenization=False, id='f1dbc55c-7c9b-495d-9a36-72bb2b619202', download_url=True, )], )
        """
        _response = self._raw_client.record_service_batch_operation(
            vault_id, records=records, continue_on_error=continue_on_error, byot=byot, request_options=request_options
        )
        return _response.data

    def record_service_bulk_get_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        skyflow_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        redaction: typing.Optional[RecordServiceBulkGetRecordRequestRedaction] = None,
        tokenization: typing.Optional[bool] = None,
        fields: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        offset: typing.Optional[str] = None,
        limit: typing.Optional[str] = None,
        download_url: typing.Optional[bool] = None,
        column_name: typing.Optional[str] = None,
        column_values: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        order_by: typing.Optional[RecordServiceBulkGetRecordRequestOrderBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BulkGetRecordResponse:
        """
        Gets the specified records from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table that contains the records.

        skyflow_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            `skyflow_id` values of the records to return, with one value per `skyflow_ids` URL parameter. For example, `?skyflow_ids=abc&skyflow_ids=123`.<br /><br />If not specified, returns the first 25 records in the table.

        redaction : typing.Optional[RecordServiceBulkGetRecordRequestRedaction]
            Redaction level to enforce for the returned records. Subject to policies assigned to the API caller.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled. Only applicable if `skyflow_id` values are specified.

        fields : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Fields to return for the record, with one value per `fields` URL parameter. For example, `?fields=abc&fields=123`.<br /><br />If not specified, returns all fields.

        offset : typing.Optional[str]
            Record position at which to start receiving data.

        limit : typing.Optional[str]
            Number of record to return. Maximum 25.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        column_name : typing.Optional[str]
            Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use `skyflow_ids`. Passing either of these parameters with `skyflow_ids` returns an error.

        column_values : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Column values of the records to return, with one value per `column_values` URL parameter. For example, `?column_values=abc&column_values=123`.<br /><br />`column_name` is mandatory when providing `column_values`. If you use column name or column value, you cannot use `skyflow_ids`. Passing either of these parameters with `skyflow_ids` returns an error.

        order_by : typing.Optional[RecordServiceBulkGetRecordRequestOrderBy]
            Order to return records, based on `skyflow_id` values. To disable, set to `NONE`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BulkGetRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_bulk_get_record(vault_id='vaultID', object_name='objectName', )
        """
        _response = self._raw_client.record_service_bulk_get_record(
            vault_id,
            object_name,
            skyflow_ids=skyflow_ids,
            redaction=redaction,
            tokenization=tokenization,
            fields=fields,
            offset=offset,
            limit=limit,
            download_url=download_url,
            column_name=column_name,
            column_values=column_values,
            order_by=order_by,
            request_options=request_options,
        )
        return _response.data

    def record_service_insert_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        records: typing.Optional[typing.Sequence[V1FieldRecords]] = OMIT,
        tokenization: typing.Optional[bool] = OMIT,
        upsert: typing.Optional[str] = OMIT,
        homogeneous: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1InsertRecordResponse:
        """
        Inserts a record in the specified table.<br /><br />The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.<br /><br />Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        records : typing.Optional[typing.Sequence[V1FieldRecords]]
            Record values and tokens.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled.

        upsert : typing.Optional[str]
            Name of a unique column in the table. Uses upsert operations to check if a record exists based on the unique column's value. If a matching record exists, the record updates with the values you provide. If a matching record doesn't exist, the upsert operation inserts a new record.<br /><br />When you upsert a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.

        homogeneous : typing.Optional[bool]
            If `true`, this operation mandates that all the records have the same fields. This parameter does not work with upsert.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1InsertRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow import V1FieldRecords
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_insert_record(vault_id='vaultID', object_name='objectName', records=[V1FieldRecords(fields={'drivers_license_number': '13456789'
        , 'name': 'John'
        , 'phone_number': '1236784563'
        , 'ssn': '123-45-6789'
        }, ), V1FieldRecords(fields={'drivers_license_number': '98765432'
        , 'name': 'James'
        , 'phone_number': '9876543215'
        , 'ssn': '345-45-9876'
        }, )], tokenization=True, upsert='drivers_license_number', homogeneous=False, )
        """
        _response = self._raw_client.record_service_insert_record(
            vault_id,
            object_name,
            records=records,
            tokenization=tokenization,
            upsert=upsert,
            homogeneous=homogeneous,
            byot=byot,
            request_options=request_options,
        )
        return _response.data

    def record_service_bulk_delete_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        skyflow_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BulkDeleteRecordResponse:
        """
        Deletes the specified records from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        skyflow_ids : typing.Optional[typing.Sequence[str]]
            `skyflow_id` values of the records to delete. If `*` is specified, this operation deletes all records in the table.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BulkDeleteRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_bulk_delete_record(vault_id='vaultID', object_name='objectName', skyflow_ids=['51782ea4-91a5-4430-a06d-f4b76efd3d2f', '110ce08f-6059-4874-b1ae-7c6651d286ff'], )
        """
        _response = self._raw_client.record_service_bulk_delete_record(
            vault_id, object_name, skyflow_ids=skyflow_ids, request_options=request_options
        )
        return _response.data

    def record_service_get_record(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        redaction: typing.Optional[RecordServiceGetRecordRequestRedaction] = None,
        tokenization: typing.Optional[bool] = None,
        fields: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        download_url: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1FieldRecords:
        """
        Returns the specified record from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        redaction : typing.Optional[RecordServiceGetRecordRequestRedaction]
            Redaction level to enforce for the returned record. Subject to policies assigned to the API caller.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled. Only applicable if `skyflow_id` values are specified.

        fields : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Fields to return for the record, with one value per `fields` URL parameter. For example, `?fields=abc&fields=123`.<br /><br />If not specified, returns all fields.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1FieldRecords
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_get_record(vault_id='vaultID', object_name='objectName', id='ID', )
        """
        _response = self._raw_client.record_service_get_record(
            vault_id,
            object_name,
            id,
            redaction=redaction,
            tokenization=tokenization,
            fields=fields,
            download_url=download_url,
            request_options=request_options,
        )
        return _response.data

    def record_service_update_record(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        record: typing.Optional[V1FieldRecords] = OMIT,
        tokenization: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1UpdateRecordResponse:
        """
        Updates the specified record in a table.<br /><br />When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.<br /><br />The time-to-live (TTL) for a transient field resets when the field value is updated.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        record : typing.Optional[V1FieldRecords]

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1UpdateRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow import V1FieldRecords
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_update_record(vault_id='vaultID', object_name='objectName', id='ID', record=V1FieldRecords(fields={'drivers_license_number': '89867453'
        , 'name': 'Steve Smith'
        , 'phone_number': '8794523160'
        , 'ssn': '143-89-2306'
        }, ), tokenization=True, )
        """
        _response = self._raw_client.record_service_update_record(
            vault_id,
            object_name,
            id,
            record=record,
            tokenization=tokenization,
            byot=byot,
            request_options=request_options,
        )
        return _response.data

    def record_service_delete_record(
        self, vault_id: str, object_name: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> V1DeleteRecordResponse:
        """
        Deletes the specified record from a table.<br /><br /><b>Note:</b> This method doesn't delete transient field tokens. Transient field values are available until they expire based on the fields' time-to-live (TTL) setting.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DeleteRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.record_service_delete_record(vault_id='vaultID', object_name='objectName', id='ID', )
        """
        _response = self._raw_client.record_service_delete_record(
            vault_id, object_name, id, request_options=request_options
        )
        return _response.data

    def file_service_upload_file(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        file_column_name: typing.Optional[core.File] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1UpdateRecordResponse:
        """
        Uploads a file to the specified record.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        file_column_name : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1UpdateRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.file_service_upload_file(vault_id='vaultID', object_name='objectName', id='ID', )
        """
        _response = self._raw_client.file_service_upload_file(
            vault_id, object_name, id, file_column_name=file_column_name, request_options=request_options
        )
        return _response.data

    def file_service_delete_file(
        self,
        vault_id: str,
        table_name: str,
        id: str,
        column_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DeleteFileResponse:
        """
        Deletes a file from the specified record.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        table_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        column_name : str
            Name of the column that contains the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DeleteFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.file_service_delete_file(vault_id='vaultID', table_name='tableName', id='ID', column_name='columnName', )
        """
        _response = self._raw_client.file_service_delete_file(
            vault_id, table_name, id, column_name, request_options=request_options
        )
        return _response.data

    def file_service_get_file_scan_status(
        self,
        vault_id: str,
        table_name: str,
        id: str,
        column_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1GetFileScanStatusResponse:
        """
        Returns the anti-virus scan status of a file.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        table_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        column_name : str
            Name of the column that contains the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1GetFileScanStatusResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.records.file_service_get_file_scan_status(vault_id='vaultID', table_name='tableName', id='ID', column_name='columnName', )
        """
        _response = self._raw_client.file_service_get_file_scan_status(
            vault_id, table_name, id, column_name, request_options=request_options
        )
        return _response.data


class AsyncRecordsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawRecordsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawRecordsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawRecordsClient
        """
        return self._raw_client

    async def record_service_batch_operation(
        self,
        vault_id: str,
        *,
        records: typing.Optional[typing.Sequence[V1BatchRecord]] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BatchOperationResponse:
        """
        Performs multiple record operations in a single transaction.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        records : typing.Optional[typing.Sequence[V1BatchRecord]]
            Record operations to perform.

        continue_on_error : typing.Optional[bool]
            Continue performing operations on partial errors.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BatchOperationResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        from skyflow import V1BatchRecord
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_batch_operation(vault_id='vaultID', records=[V1BatchRecord(fields={'drivers_license_number': '89867453'
            , 'name': 'Connor'
            , 'phone_number': '8794523160'
            , 'ssn': '143-89-2306'
            }, table_name='persons', method="POST", batch_id='persons-12345', redaction="PLAIN_TEXT", tokenization=False, download_url=False, upsert='drivers_license_number', ), V1BatchRecord(table_name='persons', method="GET", batch_id='persons-12345', redaction="PLAIN_TEXT", tokenization=False, id='f1dbc55c-7c9b-495d-9a36-72bb2b619202', download_url=True, )], )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_batch_operation(
            vault_id, records=records, continue_on_error=continue_on_error, byot=byot, request_options=request_options
        )
        return _response.data

    async def record_service_bulk_get_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        skyflow_ids: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        redaction: typing.Optional[RecordServiceBulkGetRecordRequestRedaction] = None,
        tokenization: typing.Optional[bool] = None,
        fields: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        offset: typing.Optional[str] = None,
        limit: typing.Optional[str] = None,
        download_url: typing.Optional[bool] = None,
        column_name: typing.Optional[str] = None,
        column_values: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        order_by: typing.Optional[RecordServiceBulkGetRecordRequestOrderBy] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BulkGetRecordResponse:
        """
        Gets the specified records from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table that contains the records.

        skyflow_ids : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            `skyflow_id` values of the records to return, with one value per `skyflow_ids` URL parameter. For example, `?skyflow_ids=abc&skyflow_ids=123`.<br /><br />If not specified, returns the first 25 records in the table.

        redaction : typing.Optional[RecordServiceBulkGetRecordRequestRedaction]
            Redaction level to enforce for the returned records. Subject to policies assigned to the API caller.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled. Only applicable if `skyflow_id` values are specified.

        fields : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Fields to return for the record, with one value per `fields` URL parameter. For example, `?fields=abc&fields=123`.<br /><br />If not specified, returns all fields.

        offset : typing.Optional[str]
            Record position at which to start receiving data.

        limit : typing.Optional[str]
            Number of record to return. Maximum 25.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        column_name : typing.Optional[str]
            Name of the column. It must be configured as unique in the schema. If you provide both column name or column value, you cannot use `skyflow_ids`. Passing either of these parameters with `skyflow_ids` returns an error.

        column_values : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Column values of the records to return, with one value per `column_values` URL parameter. For example, `?column_values=abc&column_values=123`.<br /><br />`column_name` is mandatory when providing `column_values`. If you use column name or column value, you cannot use `skyflow_ids`. Passing either of these parameters with `skyflow_ids` returns an error.

        order_by : typing.Optional[RecordServiceBulkGetRecordRequestOrderBy]
            Order to return records, based on `skyflow_id` values. To disable, set to `NONE`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BulkGetRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_bulk_get_record(vault_id='vaultID', object_name='objectName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_bulk_get_record(
            vault_id,
            object_name,
            skyflow_ids=skyflow_ids,
            redaction=redaction,
            tokenization=tokenization,
            fields=fields,
            offset=offset,
            limit=limit,
            download_url=download_url,
            column_name=column_name,
            column_values=column_values,
            order_by=order_by,
            request_options=request_options,
        )
        return _response.data

    async def record_service_insert_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        records: typing.Optional[typing.Sequence[V1FieldRecords]] = OMIT,
        tokenization: typing.Optional[bool] = OMIT,
        upsert: typing.Optional[str] = OMIT,
        homogeneous: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1InsertRecordResponse:
        """
        Inserts a record in the specified table.<br /><br />The time-to-live (TTL) for a transient field begins when the field value is set during record insertion.<br /><br />Columns that have a string data type and a uniqueness constraint accept strings up to 2500 characters. If an inserted string exceeds 2500 characters, the call returns a token insertion error.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        records : typing.Optional[typing.Sequence[V1FieldRecords]]
            Record values and tokens.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled.

        upsert : typing.Optional[str]
            Name of a unique column in the table. Uses upsert operations to check if a record exists based on the unique column's value. If a matching record exists, the record updates with the values you provide. If a matching record doesn't exist, the upsert operation inserts a new record.<br /><br />When you upsert a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.

        homogeneous : typing.Optional[bool]
            If `true`, this operation mandates that all the records have the same fields. This parameter does not work with upsert.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1InsertRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        from skyflow import V1FieldRecords
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_insert_record(vault_id='vaultID', object_name='objectName', records=[V1FieldRecords(fields={'drivers_license_number': '13456789'
            , 'name': 'John'
            , 'phone_number': '1236784563'
            , 'ssn': '123-45-6789'
            }, ), V1FieldRecords(fields={'drivers_license_number': '98765432'
            , 'name': 'James'
            , 'phone_number': '9876543215'
            , 'ssn': '345-45-9876'
            }, )], tokenization=True, upsert='drivers_license_number', homogeneous=False, )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_insert_record(
            vault_id,
            object_name,
            records=records,
            tokenization=tokenization,
            upsert=upsert,
            homogeneous=homogeneous,
            byot=byot,
            request_options=request_options,
        )
        return _response.data

    async def record_service_bulk_delete_record(
        self,
        vault_id: str,
        object_name: str,
        *,
        skyflow_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BulkDeleteRecordResponse:
        """
        Deletes the specified records from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        skyflow_ids : typing.Optional[typing.Sequence[str]]
            `skyflow_id` values of the records to delete. If `*` is specified, this operation deletes all records in the table.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BulkDeleteRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_bulk_delete_record(vault_id='vaultID', object_name='objectName', skyflow_ids=['51782ea4-91a5-4430-a06d-f4b76efd3d2f', '110ce08f-6059-4874-b1ae-7c6651d286ff'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_bulk_delete_record(
            vault_id, object_name, skyflow_ids=skyflow_ids, request_options=request_options
        )
        return _response.data

    async def record_service_get_record(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        redaction: typing.Optional[RecordServiceGetRecordRequestRedaction] = None,
        tokenization: typing.Optional[bool] = None,
        fields: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        download_url: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1FieldRecords:
        """
        Returns the specified record from a table.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        redaction : typing.Optional[RecordServiceGetRecordRequestRedaction]
            Redaction level to enforce for the returned record. Subject to policies assigned to the API caller.

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled. Only applicable if `skyflow_id` values are specified.

        fields : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Fields to return for the record, with one value per `fields` URL parameter. For example, `?fields=abc&fields=123`.<br /><br />If not specified, returns all fields.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1FieldRecords
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_get_record(vault_id='vaultID', object_name='objectName', id='ID', )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_get_record(
            vault_id,
            object_name,
            id,
            redaction=redaction,
            tokenization=tokenization,
            fields=fields,
            download_url=download_url,
            request_options=request_options,
        )
        return _response.data

    async def record_service_update_record(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        record: typing.Optional[V1FieldRecords] = OMIT,
        tokenization: typing.Optional[bool] = OMIT,
        byot: typing.Optional[V1Byot] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1UpdateRecordResponse:
        """
        Updates the specified record in a table.<br /><br />When you update a field, include the entire contents you want the field to store. For JSON fields, include all nested fields and values. If a nested field isn't included, it's removed.<br /><br />The time-to-live (TTL) for a transient field resets when the field value is updated.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        record : typing.Optional[V1FieldRecords]

        tokenization : typing.Optional[bool]
            If `true`, this operation returns tokens for fields with tokenization enabled.

        byot : typing.Optional[V1Byot]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1UpdateRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        from skyflow import V1FieldRecords
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_update_record(vault_id='vaultID', object_name='objectName', id='ID', record=V1FieldRecords(fields={'drivers_license_number': '89867453'
            , 'name': 'Steve Smith'
            , 'phone_number': '8794523160'
            , 'ssn': '143-89-2306'
            }, ), tokenization=True, )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_update_record(
            vault_id,
            object_name,
            id,
            record=record,
            tokenization=tokenization,
            byot=byot,
            request_options=request_options,
        )
        return _response.data

    async def record_service_delete_record(
        self, vault_id: str, object_name: str, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> V1DeleteRecordResponse:
        """
        Deletes the specified record from a table.<br /><br /><b>Note:</b> This method doesn't delete transient field tokens. Transient field values are available until they expire based on the fields' time-to-live (TTL) setting.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DeleteRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.record_service_delete_record(vault_id='vaultID', object_name='objectName', id='ID', )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_delete_record(
            vault_id, object_name, id, request_options=request_options
        )
        return _response.data

    async def file_service_upload_file(
        self,
        vault_id: str,
        object_name: str,
        id: str,
        *,
        file_column_name: typing.Optional[core.File] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1UpdateRecordResponse:
        """
        Uploads a file to the specified record.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        object_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        file_column_name : typing.Optional[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1UpdateRecordResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.file_service_upload_file(vault_id='vaultID', object_name='objectName', id='ID', )
        asyncio.run(main())
        """
        _response = await self._raw_client.file_service_upload_file(
            vault_id, object_name, id, file_column_name=file_column_name, request_options=request_options
        )
        return _response.data

    async def file_service_delete_file(
        self,
        vault_id: str,
        table_name: str,
        id: str,
        column_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DeleteFileResponse:
        """
        Deletes a file from the specified record.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        table_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        column_name : str
            Name of the column that contains the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DeleteFileResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.file_service_delete_file(vault_id='vaultID', table_name='tableName', id='ID', column_name='columnName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.file_service_delete_file(
            vault_id, table_name, id, column_name, request_options=request_options
        )
        return _response.data

    async def file_service_get_file_scan_status(
        self,
        vault_id: str,
        table_name: str,
        id: str,
        column_name: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1GetFileScanStatusResponse:
        """
        Returns the anti-virus scan status of a file.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        table_name : str
            Name of the table.

        id : str
            `skyflow_id` of the record.

        column_name : str
            Name of the column that contains the file.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1GetFileScanStatusResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.records.file_service_get_file_scan_status(vault_id='vaultID', table_name='tableName', id='ID', column_name='columnName', )
        asyncio.run(main())
        """
        _response = await self._raw_client.file_service_get_file_scan_status(
            vault_id, table_name, id, column_name, request_options=request_options
        )
        return _response.data
