# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.check_guardrails_response import CheckGuardrailsResponse
from ..types.vault_id import VaultId
from .raw_client import AsyncRawGuardrailsClient, RawGuardrailsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class GuardrailsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawGuardrailsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawGuardrailsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawGuardrailsClient
        """
        return self._raw_client

    def check_guardrails(
        self,
        *,
        vault_id: VaultId,
        text: str,
        check_toxicity: typing.Optional[bool] = OMIT,
        deny_topics: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CheckGuardrailsResponse:
        """
        Preserve safety and compliance with usage policies.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            Text to check against guardrails.

        check_toxicity : typing.Optional[bool]
            Check for toxicity in the text.

        deny_topics : typing.Optional[typing.Sequence[str]]
            List of topics to deny.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckGuardrailsResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.guardrails.check_guardrails(
            vault_id="VAULT_ID",
            text="I love to play cricket.",
            check_toxicity=True,
            deny_topics=["sports"],
        )
        """
        _response = self._raw_client.check_guardrails(
            vault_id=vault_id,
            text=text,
            check_toxicity=check_toxicity,
            deny_topics=deny_topics,
            request_options=request_options,
        )
        return _response.data


class AsyncGuardrailsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawGuardrailsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawGuardrailsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawGuardrailsClient
        """
        return self._raw_client

    async def check_guardrails(
        self,
        *,
        vault_id: VaultId,
        text: str,
        check_toxicity: typing.Optional[bool] = OMIT,
        deny_topics: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CheckGuardrailsResponse:
        """
        Preserve safety and compliance with usage policies.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            Text to check against guardrails.

        check_toxicity : typing.Optional[bool]
            Check for toxicity in the text.

        deny_topics : typing.Optional[typing.Sequence[str]]
            List of topics to deny.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CheckGuardrailsResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.guardrails.check_guardrails(
                vault_id="VAULT_ID",
                text="I love to play cricket.",
                check_toxicity=True,
                deny_topics=["sports"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.check_guardrails(
            vault_id=vault_id,
            text=text,
            check_toxicity=check_toxicity,
            deny_topics=deny_topics,
            request_options=request_options,
        )
        return _response.data
