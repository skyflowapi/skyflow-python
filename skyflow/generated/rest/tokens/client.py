# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.v_1_detokenize_record_request import V1DetokenizeRecordRequest
from ..types.v_1_detokenize_response import V1DetokenizeResponse
from ..types.v_1_tokenize_record_request import V1TokenizeRecordRequest
from ..types.v_1_tokenize_response import V1TokenizeResponse
from .raw_client import AsyncRawTokensClient, RawTokensClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTokensClient
        """
        return self._raw_client

    def record_service_detokenize(
        self,
        vault_id: str,
        *,
        detokenization_parameters: typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]] = OMIT,
        download_url: typing.Optional[bool] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetokenizeResponse:
        """
        Returns records that correspond to the specified tokens.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        detokenization_parameters : typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]]
            Detokenization details.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        continue_on_error : typing.Optional[bool]
            If `true`, the detokenization request continues even if an error occurs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow import V1DetokenizeRecordRequest
        client = Skyflow(token="YOUR_TOKEN", )
        client.tokens.record_service_detokenize(vault_id='vaultID', detokenization_parameters=[V1DetokenizeRecordRequest(token='afbd1074-51c1-4a16-9eee-e2c0ecb52125', redaction="PLAIN_TEXT", ), V1DetokenizeRecordRequest(token='05383487-fcae-42e5-a48e-5bd62a51af12', redaction="DEFAULT", )], download_url=False, )
        """
        _response = self._raw_client.record_service_detokenize(
            vault_id,
            detokenization_parameters=detokenization_parameters,
            download_url=download_url,
            continue_on_error=continue_on_error,
            request_options=request_options,
        )
        return _response.data

    def record_service_tokenize(
        self,
        vault_id: str,
        *,
        tokenization_parameters: typing.Optional[typing.Sequence[V1TokenizeRecordRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1TokenizeResponse:
        """
        Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.<br /><br /><b>Note:</b> This endpoint doesn't insert records—it returns tokens for existing values. To insert records and tokenize that new record's values, see <a href='#RecordService_InsertRecord'>Insert Record</a> and the tokenization parameter.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        tokenization_parameters : typing.Optional[typing.Sequence[V1TokenizeRecordRequest]]
            Tokenization details.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1TokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.tokens.record_service_tokenize(vault_id='vaultID', )
        """
        _response = self._raw_client.record_service_tokenize(
            vault_id, tokenization_parameters=tokenization_parameters, request_options=request_options
        )
        return _response.data


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTokensClient
        """
        return self._raw_client

    async def record_service_detokenize(
        self,
        vault_id: str,
        *,
        detokenization_parameters: typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]] = OMIT,
        download_url: typing.Optional[bool] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetokenizeResponse:
        """
        Returns records that correspond to the specified tokens.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        detokenization_parameters : typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]]
            Detokenization details.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        continue_on_error : typing.Optional[bool]
            If `true`, the detokenization request continues even if an error occurs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        from skyflow import V1DetokenizeRecordRequest
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tokens.record_service_detokenize(vault_id='vaultID', detokenization_parameters=[V1DetokenizeRecordRequest(token='afbd1074-51c1-4a16-9eee-e2c0ecb52125', redaction="PLAIN_TEXT", ), V1DetokenizeRecordRequest(token='05383487-fcae-42e5-a48e-5bd62a51af12', redaction="DEFAULT", )], download_url=False, )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_detokenize(
            vault_id,
            detokenization_parameters=detokenization_parameters,
            download_url=download_url,
            continue_on_error=continue_on_error,
            request_options=request_options,
        )
        return _response.data

    async def record_service_tokenize(
        self,
        vault_id: str,
        *,
        tokenization_parameters: typing.Optional[typing.Sequence[V1TokenizeRecordRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1TokenizeResponse:
        """
        Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.<br /><br /><b>Note:</b> This endpoint doesn't insert records—it returns tokens for existing values. To insert records and tokenize that new record's values, see <a href='#RecordService_InsertRecord'>Insert Record</a> and the tokenization parameter.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        tokenization_parameters : typing.Optional[typing.Sequence[V1TokenizeRecordRequest]]
            Tokenization details.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1TokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.tokens.record_service_tokenize(vault_id='vaultID', )
        asyncio.run(main())
        """
        _response = await self._raw_client.record_service_tokenize(
            vault_id, tokenization_parameters=tokenization_parameters, request_options=request_options
        )
        return _response.data
