# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.v_1_detokenize_record_request import V1DetokenizeRecordRequest
from ..core.request_options import RequestOptions
from ..types.v_1_detokenize_response import V1DetokenizeResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.not_found_error import NotFoundError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.v_1_tokenize_record_request import V1TokenizeRecordRequest
from ..types.v_1_tokenize_response import V1TokenizeResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def record_service_detokenize(
        self,
        vault_id: str,
        *,
        detokenization_parameters: typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]] = OMIT,
        download_url: typing.Optional[bool] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetokenizeResponse:
        """
        Returns records that correspond to the specified tokens.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        detokenization_parameters : typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]]
            Detokenization details.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        continue_on_error : typing.Optional[bool]
            If `true`, the detokenization request continues even if an error occurs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow, V1DetokenizeRecordRequest

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.tokens.record_service_detokenize(
            vault_id="vaultID",
            detokenization_parameters=[
                V1DetokenizeRecordRequest(
                    token="afbd1074-51c1-4a16-9eee-e2c0ecb52125",
                    redaction="PLAIN_TEXT",
                ),
                V1DetokenizeRecordRequest(
                    token="05383487-fcae-42e5-a48e-5bd62a51af12",
                    redaction="DEFAULT",
                ),
            ],
            download_url=False,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/vaults/{jsonable_encoder(vault_id)}/detokenize",
            method="POST",
            json={
                "detokenizationParameters": convert_and_respect_annotation_metadata(
                    object_=detokenization_parameters,
                    annotation=typing.Sequence[V1DetokenizeRecordRequest],
                    direction="write",
                ),
                "downloadURL": download_url,
                "continueOnError": continue_on_error,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    V1DetokenizeResponse,
                    parse_obj_as(
                        type_=V1DetokenizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Dict[str, typing.Optional[typing.Any]],
                        parse_obj_as(
                            type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def record_service_tokenize(
        self,
        vault_id: str,
        *,
        tokenization_parameters: typing.Optional[typing.Sequence[V1TokenizeRecordRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1TokenizeResponse:
        """
        Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.<br /><br /><b>Note:</b> This endpoint doesn't insert recordsâ€”it returns tokens for existing values. To insert records and tokenize that new record's values, see <a href='#RecordService_InsertRecord'>Insert Record</a> and the tokenization parameter.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        tokenization_parameters : typing.Optional[typing.Sequence[V1TokenizeRecordRequest]]
            Tokenization details.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1TokenizeResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.tokens.record_service_tokenize(
            vault_id="vaultID",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/vaults/{jsonable_encoder(vault_id)}/tokenize",
            method="POST",
            json={
                "tokenizationParameters": convert_and_respect_annotation_metadata(
                    object_=tokenization_parameters,
                    annotation=typing.Sequence[V1TokenizeRecordRequest],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    V1TokenizeResponse,
                    parse_obj_as(
                        type_=V1TokenizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Dict[str, typing.Optional[typing.Any]],
                        parse_obj_as(
                            type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def record_service_detokenize(
        self,
        vault_id: str,
        *,
        detokenization_parameters: typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]] = OMIT,
        download_url: typing.Optional[bool] = OMIT,
        continue_on_error: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetokenizeResponse:
        """
        Returns records that correspond to the specified tokens.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        detokenization_parameters : typing.Optional[typing.Sequence[V1DetokenizeRecordRequest]]
            Detokenization details.

        download_url : typing.Optional[bool]
            If `true`, returns download URLs for fields with a file data type. URLs are valid for 15 minutes. If virus scanning is enabled, only returns if the file is clean.

        continue_on_error : typing.Optional[bool]
            If `true`, the detokenization request continues even if an error occurs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetokenizeResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow, V1DetokenizeRecordRequest

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tokens.record_service_detokenize(
                vault_id="vaultID",
                detokenization_parameters=[
                    V1DetokenizeRecordRequest(
                        token="afbd1074-51c1-4a16-9eee-e2c0ecb52125",
                        redaction="PLAIN_TEXT",
                    ),
                    V1DetokenizeRecordRequest(
                        token="05383487-fcae-42e5-a48e-5bd62a51af12",
                        redaction="DEFAULT",
                    ),
                ],
                download_url=False,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/vaults/{jsonable_encoder(vault_id)}/detokenize",
            method="POST",
            json={
                "detokenizationParameters": convert_and_respect_annotation_metadata(
                    object_=detokenization_parameters,
                    annotation=typing.Sequence[V1DetokenizeRecordRequest],
                    direction="write",
                ),
                "downloadURL": download_url,
                "continueOnError": continue_on_error,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    V1DetokenizeResponse,
                    parse_obj_as(
                        type_=V1DetokenizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Dict[str, typing.Optional[typing.Any]],
                        parse_obj_as(
                            type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def record_service_tokenize(
        self,
        vault_id: str,
        *,
        tokenization_parameters: typing.Optional[typing.Sequence[V1TokenizeRecordRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1TokenizeResponse:
        """
        Returns tokens that correspond to the specified records. Only applicable for fields with deterministic tokenization.<br /><br /><b>Note:</b> This endpoint doesn't insert recordsâ€”it returns tokens for existing values. To insert records and tokenize that new record's values, see <a href='#RecordService_InsertRecord'>Insert Record</a> and the tokenization parameter.

        Parameters
        ----------
        vault_id : str
            ID of the vault.

        tokenization_parameters : typing.Optional[typing.Sequence[V1TokenizeRecordRequest]]
            Tokenization details.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1TokenizeResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.tokens.record_service_tokenize(
                vault_id="vaultID",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/vaults/{jsonable_encoder(vault_id)}/tokenize",
            method="POST",
            json={
                "tokenizationParameters": convert_and_respect_annotation_metadata(
                    object_=tokenization_parameters,
                    annotation=typing.Sequence[V1TokenizeRecordRequest],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    V1TokenizeResponse,
                    parse_obj_as(
                        type_=V1TokenizeResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Dict[str, typing.Optional[typing.Any]],
                        parse_obj_as(
                            type_=typing.Dict[str, typing.Optional[typing.Any]],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
