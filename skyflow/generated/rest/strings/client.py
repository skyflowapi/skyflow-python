# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.allow_regex import AllowRegex
from ..types.deidentify_string_response import DeidentifyStringResponse
from ..types.entity_types import EntityTypes
from ..types.reidentify_string_response import ReidentifyStringResponse
from ..types.restrict_regex import RestrictRegex
from ..types.token_type import TokenType
from ..types.transformations import Transformations
from ..types.vault_id import VaultId
from .raw_client import AsyncRawStringsClient, RawStringsClient
from .types.reidentify_string_request_format import ReidentifyStringRequestFormat

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class StringsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawStringsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawStringsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawStringsClient
        """
        return self._raw_client

    def deidentify_string(
        self,
        *,
        vault_id: VaultId,
        text: str,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenType] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyStringResponse:
        """
        De-identifies sensitive data from a string.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            String to de-identify.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenType]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyStringResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.strings.deidentify_string(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            text="My name is John Doe, and my email is johndoe@acme.com.",
        )
        """
        _response = self._raw_client.deidentify_string(
            vault_id=vault_id,
            text=text,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def reidentify_string(
        self,
        *,
        text: str,
        vault_id: str,
        format: typing.Optional[ReidentifyStringRequestFormat] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReidentifyStringResponse:
        """
        Re-identifies tokens in a string.

        Parameters
        ----------
        text : str
            String to re-identify.

        vault_id : str
            ID of the vault where the entities are stored.

        format : typing.Optional[ReidentifyStringRequestFormat]
            Mapping of perferred data formatting options to entity types. Returned values are dependent on the configuration of the vault storing the data and the permissions of the user or account making the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReidentifyStringResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.strings.reidentify_string(
            text="My name is [NAME_1], and my email is [EMAIL_1].",
            vault_id="1ad6db07-8405-46cf-9a1e-db148ff9f4c5",
        )
        """
        _response = self._raw_client.reidentify_string(
            text=text, vault_id=vault_id, format=format, request_options=request_options
        )
        return _response.data


class AsyncStringsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawStringsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawStringsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawStringsClient
        """
        return self._raw_client

    async def deidentify_string(
        self,
        *,
        vault_id: VaultId,
        text: str,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenType] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyStringResponse:
        """
        De-identifies sensitive data from a string.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            String to de-identify.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenType]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyStringResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.strings.deidentify_string(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                text="My name is John Doe, and my email is johndoe@acme.com.",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_string(
            vault_id=vault_id,
            text=text,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def reidentify_string(
        self,
        *,
        text: str,
        vault_id: str,
        format: typing.Optional[ReidentifyStringRequestFormat] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReidentifyStringResponse:
        """
        Re-identifies tokens in a string.

        Parameters
        ----------
        text : str
            String to re-identify.

        vault_id : str
            ID of the vault where the entities are stored.

        format : typing.Optional[ReidentifyStringRequestFormat]
            Mapping of perferred data formatting options to entity types. Returned values are dependent on the configuration of the vault storing the data and the permissions of the user or account making the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReidentifyStringResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.strings.reidentify_string(
                text="My name is [NAME_1], and my email is [EMAIL_1].",
                vault_id="1ad6db07-8405-46cf-9a1e-db148ff9f4c5",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.reidentify_string(
            text=text, vault_id=vault_id, format=format, request_options=request_options
        )
        return _response.data
