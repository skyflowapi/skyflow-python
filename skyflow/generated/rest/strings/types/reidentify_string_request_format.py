# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...types.entity_type import EntityType


class ReidentifyStringRequestFormat(UniversalBaseModel):
    """
    Mapping of perferred data formatting options to entity types. Returned values are dependent on the configuration of the vault storing the data and the permissions of the user or account making the request.
    """

    redacted: typing.Optional[typing.List[EntityType]] = pydantic.Field(default=None)
    """
    Entity types to fully redact.
    """

    masked: typing.Optional[typing.List[EntityType]] = pydantic.Field(default=None)
    """
    Entity types to mask.
    """

    plaintext: typing.Optional[typing.List[EntityType]] = pydantic.Field(default=None)
    """
    Entity types to return in plaintext.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
