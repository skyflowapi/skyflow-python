# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.allow_regex import AllowRegex
from ..types.deidentify_string_response import DeidentifyStringResponse
from ..types.entity_types import EntityTypes
from ..types.error_response import ErrorResponse
from ..types.reidentify_string_response import ReidentifyStringResponse
from ..types.restrict_regex import RestrictRegex
from ..types.token_type import TokenType
from ..types.transformations import Transformations
from ..types.vault_id import VaultId
from .types.reidentify_string_request_format import ReidentifyStringRequestFormat

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawStringsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def deidentify_string(
        self,
        *,
        vault_id: VaultId,
        text: str,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenType] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[DeidentifyStringResponse]:
        """
        De-identifies sensitive data from a string.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            String to de-identify.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenType]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[DeidentifyStringResponse]
            A successful response.
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/detect/deidentify/string",
            method="POST",
            json={
                "vault_id": vault_id,
                "text": text,
                "entity_types": entity_types,
                "token_type": convert_and_respect_annotation_metadata(
                    object_=token_type, annotation=TokenType, direction="write"
                ),
                "allow_regex": allow_regex,
                "restrict_regex": restrict_regex,
                "transformations": convert_and_respect_annotation_metadata(
                    object_=transformations, annotation=Transformations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeidentifyStringResponse,
                    parse_obj_as(
                        type_=DeidentifyStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def reidentify_string(
        self,
        *,
        text: str,
        vault_id: str,
        format: typing.Optional[ReidentifyStringRequestFormat] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ReidentifyStringResponse]:
        """
        Re-identifies tokens in a string.

        Parameters
        ----------
        text : str
            String to re-identify.

        vault_id : str
            ID of the vault where the entities are stored.

        format : typing.Optional[ReidentifyStringRequestFormat]
            Mapping of perferred data formatting options to entity types. Returned values are dependent on the configuration of the vault storing the data and the permissions of the user or account making the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ReidentifyStringResponse]
            A successful response.
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/detect/reidentify/string",
            method="POST",
            json={
                "text": text,
                "vault_id": vault_id,
                "format": convert_and_respect_annotation_metadata(
                    object_=format, annotation=ReidentifyStringRequestFormat, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ReidentifyStringResponse,
                    parse_obj_as(
                        type_=ReidentifyStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawStringsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def deidentify_string(
        self,
        *,
        vault_id: VaultId,
        text: str,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenType] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[DeidentifyStringResponse]:
        """
        De-identifies sensitive data from a string.

        Parameters
        ----------
        vault_id : VaultId

        text : str
            String to de-identify.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenType]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[DeidentifyStringResponse]
            A successful response.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/detect/deidentify/string",
            method="POST",
            json={
                "vault_id": vault_id,
                "text": text,
                "entity_types": entity_types,
                "token_type": convert_and_respect_annotation_metadata(
                    object_=token_type, annotation=TokenType, direction="write"
                ),
                "allow_regex": allow_regex,
                "restrict_regex": restrict_regex,
                "transformations": convert_and_respect_annotation_metadata(
                    object_=transformations, annotation=Transformations, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    DeidentifyStringResponse,
                    parse_obj_as(
                        type_=DeidentifyStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def reidentify_string(
        self,
        *,
        text: str,
        vault_id: str,
        format: typing.Optional[ReidentifyStringRequestFormat] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ReidentifyStringResponse]:
        """
        Re-identifies tokens in a string.

        Parameters
        ----------
        text : str
            String to re-identify.

        vault_id : str
            ID of the vault where the entities are stored.

        format : typing.Optional[ReidentifyStringRequestFormat]
            Mapping of perferred data formatting options to entity types. Returned values are dependent on the configuration of the vault storing the data and the permissions of the user or account making the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ReidentifyStringResponse]
            A successful response.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/detect/reidentify/string",
            method="POST",
            json={
                "text": text,
                "vault_id": vault_id,
                "format": convert_and_respect_annotation_metadata(
                    object_=format, annotation=ReidentifyStringRequestFormat, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ReidentifyStringResponse,
                    parse_obj_as(
                        type_=ReidentifyStringResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorResponse,
                        parse_obj_as(
                            type_=ErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
