# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.v_1_bin_list_response import V1BinListResponse
from ..types.v_1_vault_schema_config import V1VaultSchemaConfig
from .raw_client import AsyncRawBinLookupClient, RawBinLookupClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BinLookupClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBinLookupClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBinLookupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBinLookupClient
        """
        return self._raw_client

    def bin_list_service_list_cards_of_bin(
        self,
        *,
        fields: typing.Optional[typing.Sequence[str]] = OMIT,
        bin: typing.Optional[str] = OMIT,
        vault_schema_config: typing.Optional[V1VaultSchemaConfig] = OMIT,
        skyflow_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BinListResponse:
        """
        <b>Note</b>: This endpoint is in beta and subject to change. <br><br> Returns the specified card metadata.

        Parameters
        ----------
        fields : typing.Optional[typing.Sequence[str]]
            Fields to return. If not specified, all fields are returned.

        bin : typing.Optional[str]
            BIN of the card.

        vault_schema_config : typing.Optional[V1VaultSchemaConfig]

        skyflow_id : typing.Optional[str]
            <code>skyflow_id</code> of the record.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BinListResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.bin_lookup.bin_list_service_list_cards_of_bin(bin='012345', )
        """
        _response = self._raw_client.bin_list_service_list_cards_of_bin(
            fields=fields,
            bin=bin,
            vault_schema_config=vault_schema_config,
            skyflow_id=skyflow_id,
            request_options=request_options,
        )
        return _response.data


class AsyncBinLookupClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBinLookupClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBinLookupClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBinLookupClient
        """
        return self._raw_client

    async def bin_list_service_list_cards_of_bin(
        self,
        *,
        fields: typing.Optional[typing.Sequence[str]] = OMIT,
        bin: typing.Optional[str] = OMIT,
        vault_schema_config: typing.Optional[V1VaultSchemaConfig] = OMIT,
        skyflow_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1BinListResponse:
        """
        <b>Note</b>: This endpoint is in beta and subject to change. <br><br> Returns the specified card metadata.

        Parameters
        ----------
        fields : typing.Optional[typing.Sequence[str]]
            Fields to return. If not specified, all fields are returned.

        bin : typing.Optional[str]
            BIN of the card.

        vault_schema_config : typing.Optional[V1VaultSchemaConfig]

        skyflow_id : typing.Optional[str]
            <code>skyflow_id</code> of the record.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1BinListResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.bin_lookup.bin_list_service_list_cards_of_bin(bin='012345', )
        asyncio.run(main())
        """
        _response = await self._raw_client.bin_list_service_list_cards_of_bin(
            fields=fields,
            bin=bin,
            vault_schema_config=vault_schema_config,
            skyflow_id=skyflow_id,
            request_options=request_options,
        )
        return _response.data
