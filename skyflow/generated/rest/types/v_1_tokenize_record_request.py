# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class V1TokenizeRecordRequest(UniversalBaseModel):
    value: typing.Optional[str] = pydantic.Field(default=None)
    """
    Existing value to return a token for.
    """

    column_group: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="columnGroup")] = (
        pydantic.Field(default=None)
    )
    """
    Name of the column group that the value belongs to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
