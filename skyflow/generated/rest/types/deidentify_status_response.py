# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .deidentify_file_output import DeidentifyFileOutput
from .deidentify_status_response_output_type import DeidentifyStatusResponseOutputType
from .deidentify_status_response_status import DeidentifyStatusResponseStatus
from .deidentify_status_response_word_character_count import DeidentifyStatusResponseWordCharacterCount


class DeidentifyStatusResponse(UniversalBaseModel):
    """
    Response to get the status of a detect run.
    """

    status: DeidentifyStatusResponseStatus = pydantic.Field()
    """
    Status of the detect run.
    """

    output: typing.List[DeidentifyFileOutput] = pydantic.Field()
    """
    How the input file was specified.
    """

    output_type: typing_extensions.Annotated[
        typing.Optional[DeidentifyStatusResponseOutputType], FieldMetadata(alias="outputType")
    ] = pydantic.Field(default=None)
    """
    How the output file is specified.
    """

    message: str = pydantic.Field()
    """
    Status details about the detect run.
    """

    word_character_count: typing_extensions.Annotated[
        typing.Optional[DeidentifyStatusResponseWordCharacterCount], FieldMetadata(alias="wordCharacterCount")
    ] = pydantic.Field(default=None)
    """
    Word and character count in the processed text.
    """

    size: typing.Optional[float] = pydantic.Field(default=None)
    """
    Size of the processed text in kilobytes (KB).
    """

    duration: typing.Optional[float] = pydantic.Field(default=None)
    """
    Duration of the processed audio in seconds.
    """

    pages: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of pages in the processed PDF.
    """

    slides: typing.Optional[int] = pydantic.Field(default=None)
    """
    Number of slides in the processed presentation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
