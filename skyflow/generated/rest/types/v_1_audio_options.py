# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class V1AudioOptions(UniversalBaseModel):
    """
    Options for audio files.
    """

    bleep_start_padding: typing.Optional[float] = pydantic.Field(default=None)
    """
    Padding added to the beginning of a bleep, in seconds.
    """

    bleep_end_padding: typing.Optional[float] = pydantic.Field(default=None)
    """
    Padding added to the end of a bleep, in seconds.
    """

    distortion_steps: typing.Optional[int] = pydantic.Field(default=None)
    """
    Specifies how the distortion will be made. Providing a number more than 0 will result in a higher tone and a coefficient less than 0 will result in a lower tone.
    """

    bleep_frequency: typing.Optional[int] = pydantic.Field(default=None)
    """
    This parameter configures the frequency of the sine wave used for the bleep sound in an audio segment.
    """

    bleep_gain: typing.Optional[int] = pydantic.Field(default=None)
    """
    It controls the relative loudness of the bleep,positive values increase its loudness, and negative values decrease it.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
