# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.detect_data_accuracy import DetectDataAccuracy
from ..types.detect_data_entities import DetectDataEntities
from ..types.detect_file_request_data_type import DetectFileRequestDataType
from ..types.detect_request_deidentify_option import DetectRequestDeidentifyOption
from ..types.v_1_advanced_options import V1AdvancedOptions
from ..types.v_1_audio_config import V1AudioConfig
from ..types.v_1_detect_file_response import V1DetectFileResponse
from ..types.v_1_detect_status_response import V1DetectStatusResponse
from ..types.v_1_detect_text_response import V1DetectTextResponse
from ..types.v_1_file_data_format import V1FileDataFormat
from ..types.v_1_image_options import V1ImageOptions
from ..types.v_1_pdf_config import V1PdfConfig
from .raw_client import AsyncRawDeprecatedClient, RawDeprecatedClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DeprecatedClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDeprecatedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDeprecatedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDeprecatedClient
        """
        return self._raw_client

    def detect_service_detect_file_input(
        self,
        *,
        file: str,
        data_format: V1FileDataFormat,
        input_type: DetectFileRequestDataType,
        vault_id: str,
        session_id: typing.Optional[str] = OMIT,
        restrict_entity_types: typing.Optional[typing.Sequence[DetectDataEntities]] = OMIT,
        allow_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        restrict_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        return_entities: typing.Optional[bool] = OMIT,
        accuracy: typing.Optional[DetectDataAccuracy] = OMIT,
        audio: typing.Optional[V1AudioConfig] = OMIT,
        image: typing.Optional[V1ImageOptions] = OMIT,
        pdf: typing.Optional[V1PdfConfig] = OMIT,
        advanced_options: typing.Optional[V1AdvancedOptions] = OMIT,
        deidentify_token_format: typing.Optional[DetectRequestDeidentifyOption] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetectFileResponse:
        """
        <b>Note</b>: This operation is deprecated. Use one of the <a href=#De-identify%20File>De-identify File</a> operations.<br/><br/>Detects and deidentifies sensitive data from image, audio, and video files.

        Parameters
        ----------
        file : str
            Path of the file or base64-encoded data that has to be processed.

        data_format : V1FileDataFormat

        input_type : DetectFileRequestDataType

        vault_id : str
            ID of the vault.

        session_id : typing.Optional[str]
            Will give a handle to delete the tokens generated during a specific interaction.

        restrict_entity_types : typing.Optional[typing.Sequence[DetectDataEntities]]
            Entities to detect and deidentify.

        allow_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to ignore when detecting entities.

        restrict_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to always restrict. Strings matching these regular expressions are replaced with 'RESTRICTED'.

        return_entities : typing.Optional[bool]
            If `true`, returns the details for the detected entities.

        accuracy : typing.Optional[DetectDataAccuracy]

        audio : typing.Optional[V1AudioConfig]

        image : typing.Optional[V1ImageOptions]

        pdf : typing.Optional[V1PdfConfig]

        advanced_options : typing.Optional[V1AdvancedOptions]

        deidentify_token_format : typing.Optional[DetectRequestDeidentifyOption]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow, V1AudioConfig

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.deprecated.detect_service_detect_file_input(
            file="fkdjfhdlnnggtsjj...",
            data_format="mp3",
            input_type="BASE64",
            vault_id="a372f752689c9bfc8ca3d4dba",
            restrict_entity_types=[
                "name",
                "age",
                "location",
                "ssn",
                "bank_account",
                "credit_card",
                "credit_card_expiration",
                "cvv",
                "date",
                "date_interval",
                "dob",
                "driver_license",
                "email_address",
                "healthcare_number",
                "numerical_pii",
                "phone_number",
                "medical_code",
                "account_number",
                "gender_sexuality",
                "name_medical_professional",
                "occupation",
                "organization",
                "organization_medical_facility",
            ],
            return_entities=True,
            accuracy="high_multilingual",
            audio=V1AudioConfig(
                output_transcription="none",
                output_processed_audio=False,
            ),
        )
        """
        _response = self._raw_client.detect_service_detect_file_input(
            file=file,
            data_format=data_format,
            input_type=input_type,
            vault_id=vault_id,
            session_id=session_id,
            restrict_entity_types=restrict_entity_types,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            return_entities=return_entities,
            accuracy=accuracy,
            audio=audio,
            image=image,
            pdf=pdf,
            advanced_options=advanced_options,
            deidentify_token_format=deidentify_token_format,
            request_options=request_options,
        )
        return _response.data

    def detect_service_detect_status(
        self, id: str, *, vault_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> V1DetectStatusResponse:
        """
        <b>Note</b>: This operation is deprecated. Use <a href=#get_detect_run>Get Detect Run</a>.<br/><br/>Returns the status of a file deidentification request.

        Parameters
        ----------
        id : str
            ID of the deidentification request.

        vault_id : typing.Optional[str]
            ID of the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectStatusResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.deprecated.detect_service_detect_status(
            id="ID",
        )
        """
        _response = self._raw_client.detect_service_detect_status(
            id, vault_id=vault_id, request_options=request_options
        )
        return _response.data

    def detect_service_detect_text(
        self,
        *,
        text: str,
        vault_id: str,
        session_id: typing.Optional[str] = OMIT,
        restrict_entity_types: typing.Optional[typing.Sequence[DetectDataEntities]] = OMIT,
        deidentify_token_format: typing.Optional[DetectRequestDeidentifyOption] = OMIT,
        allow_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        restrict_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        return_entities: typing.Optional[bool] = OMIT,
        accuracy: typing.Optional[DetectDataAccuracy] = OMIT,
        advanced_options: typing.Optional[V1AdvancedOptions] = OMIT,
        store_entities: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetectTextResponse:
        """
        <b>Note</b>: This operation is deprecated. Use <a href=#deidentify_string>De-identify String</a>.<br/><br/>Detects and deidentifies sensitive data from text.

        Parameters
        ----------
        text : str
            Data to deidentify.

        vault_id : str
            ID of the vault.

        session_id : typing.Optional[str]
            Will give a handle to delete the tokens generated during a specific interaction.

        restrict_entity_types : typing.Optional[typing.Sequence[DetectDataEntities]]
            Entities to detect and deidentify.

        deidentify_token_format : typing.Optional[DetectRequestDeidentifyOption]

        allow_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to ignore when detecting entities.

        restrict_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to always restrict. Strings matching these regular expressions are replaced with 'RESTRICTED'.

        return_entities : typing.Optional[bool]
            If `true`, returns the details for the detected entities.

        accuracy : typing.Optional[DetectDataAccuracy]

        advanced_options : typing.Optional[V1AdvancedOptions]

        store_entities : typing.Optional[bool]
            Indicates whether entities should be stored in the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectTextResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.deprecated.detect_service_detect_text(
            text="text",
            vault_id="c848741aefb74bf38780da5399a76507",
        )
        """
        _response = self._raw_client.detect_service_detect_text(
            text=text,
            vault_id=vault_id,
            session_id=session_id,
            restrict_entity_types=restrict_entity_types,
            deidentify_token_format=deidentify_token_format,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            return_entities=return_entities,
            accuracy=accuracy,
            advanced_options=advanced_options,
            store_entities=store_entities,
            request_options=request_options,
        )
        return _response.data


class AsyncDeprecatedClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDeprecatedClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDeprecatedClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDeprecatedClient
        """
        return self._raw_client

    async def detect_service_detect_file_input(
        self,
        *,
        file: str,
        data_format: V1FileDataFormat,
        input_type: DetectFileRequestDataType,
        vault_id: str,
        session_id: typing.Optional[str] = OMIT,
        restrict_entity_types: typing.Optional[typing.Sequence[DetectDataEntities]] = OMIT,
        allow_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        restrict_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        return_entities: typing.Optional[bool] = OMIT,
        accuracy: typing.Optional[DetectDataAccuracy] = OMIT,
        audio: typing.Optional[V1AudioConfig] = OMIT,
        image: typing.Optional[V1ImageOptions] = OMIT,
        pdf: typing.Optional[V1PdfConfig] = OMIT,
        advanced_options: typing.Optional[V1AdvancedOptions] = OMIT,
        deidentify_token_format: typing.Optional[DetectRequestDeidentifyOption] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetectFileResponse:
        """
        <b>Note</b>: This operation is deprecated. Use one of the <a href=#De-identify%20File>De-identify File</a> operations.<br/><br/>Detects and deidentifies sensitive data from image, audio, and video files.

        Parameters
        ----------
        file : str
            Path of the file or base64-encoded data that has to be processed.

        data_format : V1FileDataFormat

        input_type : DetectFileRequestDataType

        vault_id : str
            ID of the vault.

        session_id : typing.Optional[str]
            Will give a handle to delete the tokens generated during a specific interaction.

        restrict_entity_types : typing.Optional[typing.Sequence[DetectDataEntities]]
            Entities to detect and deidentify.

        allow_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to ignore when detecting entities.

        restrict_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to always restrict. Strings matching these regular expressions are replaced with 'RESTRICTED'.

        return_entities : typing.Optional[bool]
            If `true`, returns the details for the detected entities.

        accuracy : typing.Optional[DetectDataAccuracy]

        audio : typing.Optional[V1AudioConfig]

        image : typing.Optional[V1ImageOptions]

        pdf : typing.Optional[V1PdfConfig]

        advanced_options : typing.Optional[V1AdvancedOptions]

        deidentify_token_format : typing.Optional[DetectRequestDeidentifyOption]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow, V1AudioConfig

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deprecated.detect_service_detect_file_input(
                file="fkdjfhdlnnggtsjj...",
                data_format="mp3",
                input_type="BASE64",
                vault_id="a372f752689c9bfc8ca3d4dba",
                restrict_entity_types=[
                    "name",
                    "age",
                    "location",
                    "ssn",
                    "bank_account",
                    "credit_card",
                    "credit_card_expiration",
                    "cvv",
                    "date",
                    "date_interval",
                    "dob",
                    "driver_license",
                    "email_address",
                    "healthcare_number",
                    "numerical_pii",
                    "phone_number",
                    "medical_code",
                    "account_number",
                    "gender_sexuality",
                    "name_medical_professional",
                    "occupation",
                    "organization",
                    "organization_medical_facility",
                ],
                return_entities=True,
                accuracy="high_multilingual",
                audio=V1AudioConfig(
                    output_transcription="none",
                    output_processed_audio=False,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.detect_service_detect_file_input(
            file=file,
            data_format=data_format,
            input_type=input_type,
            vault_id=vault_id,
            session_id=session_id,
            restrict_entity_types=restrict_entity_types,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            return_entities=return_entities,
            accuracy=accuracy,
            audio=audio,
            image=image,
            pdf=pdf,
            advanced_options=advanced_options,
            deidentify_token_format=deidentify_token_format,
            request_options=request_options,
        )
        return _response.data

    async def detect_service_detect_status(
        self, id: str, *, vault_id: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> V1DetectStatusResponse:
        """
        <b>Note</b>: This operation is deprecated. Use <a href=#get_detect_run>Get Detect Run</a>.<br/><br/>Returns the status of a file deidentification request.

        Parameters
        ----------
        id : str
            ID of the deidentification request.

        vault_id : typing.Optional[str]
            ID of the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectStatusResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deprecated.detect_service_detect_status(
                id="ID",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.detect_service_detect_status(
            id, vault_id=vault_id, request_options=request_options
        )
        return _response.data

    async def detect_service_detect_text(
        self,
        *,
        text: str,
        vault_id: str,
        session_id: typing.Optional[str] = OMIT,
        restrict_entity_types: typing.Optional[typing.Sequence[DetectDataEntities]] = OMIT,
        deidentify_token_format: typing.Optional[DetectRequestDeidentifyOption] = OMIT,
        allow_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        restrict_regex: typing.Optional[typing.Sequence[str]] = OMIT,
        return_entities: typing.Optional[bool] = OMIT,
        accuracy: typing.Optional[DetectDataAccuracy] = OMIT,
        advanced_options: typing.Optional[V1AdvancedOptions] = OMIT,
        store_entities: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1DetectTextResponse:
        """
        <b>Note</b>: This operation is deprecated. Use <a href=#deidentify_string>De-identify String</a>.<br/><br/>Detects and deidentifies sensitive data from text.

        Parameters
        ----------
        text : str
            Data to deidentify.

        vault_id : str
            ID of the vault.

        session_id : typing.Optional[str]
            Will give a handle to delete the tokens generated during a specific interaction.

        restrict_entity_types : typing.Optional[typing.Sequence[DetectDataEntities]]
            Entities to detect and deidentify.

        deidentify_token_format : typing.Optional[DetectRequestDeidentifyOption]

        allow_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to ignore when detecting entities.

        restrict_regex : typing.Optional[typing.Sequence[str]]
            Regular expressions to always restrict. Strings matching these regular expressions are replaced with 'RESTRICTED'.

        return_entities : typing.Optional[bool]
            If `true`, returns the details for the detected entities.

        accuracy : typing.Optional[DetectDataAccuracy]

        advanced_options : typing.Optional[V1AdvancedOptions]

        store_entities : typing.Optional[bool]
            Indicates whether entities should be stored in the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1DetectTextResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.deprecated.detect_service_detect_text(
                text="text",
                vault_id="c848741aefb74bf38780da5399a76507",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.detect_service_detect_text(
            text=text,
            vault_id=vault_id,
            session_id=session_id,
            restrict_entity_types=restrict_entity_types,
            deidentify_token_format=deidentify_token_format,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            return_entities=return_entities,
            accuracy=accuracy,
            advanced_options=advanced_options,
            store_entities=store_entities,
            request_options=request_options,
        )
        return _response.data
