# coding: utf-8

"""
    Skyflow Data API

    # Data API  This API inserts, retrieves, and otherwise manages data in a vault.  The Data API is available from two base URIs. *identifier* is the identifier in your vault's URL.<ul><li><b>Sandbox:</b> https://*identifier*.vault.skyflowapis-preview.com</li><li><b>Production:</b> https://*identifier*.vault.skyflowapis.com</li></ul>  When you make an API call, you need to add a header: <table><tr><th>Header</th><th>Value</th><th>Example</th></tr><tr><td>Authorization</td><td>A Bearer Token. See <a href='/api-authentication/'>API Authentication</a>.</td><td><code>Authorization: Bearer eyJhbGciOiJSUzI...1NiIsJdfPA</code></td></tr><table/>

    The version of the OpenAPI document: v1
    Contact: support@skyflow.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1Card(BaseModel):
    """
    Card metadata of the requested BIN.
    """ # noqa: E501
    bin: Optional[StrictStr] = Field(default=None, description="BIN of the card.", alias="BIN")
    issuer_name: Optional[StrictStr] = Field(default=None, description="Name of the card issuer bank.")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code of the card.")
    currency: Optional[StrictStr] = Field(default=None, description="Currency of the card.")
    card_type: Optional[StrictStr] = Field(default=None, description="Type of the card.")
    card_category: Optional[StrictStr] = Field(default=None, description="Category of the card.")
    card_scheme: Optional[StrictStr] = Field(default=None, description="Scheme of the card.")
    card_last_four_digits: Optional[StrictStr] = Field(default=None, description="Last four digits of the card number.")
    card_expiry: Optional[StrictStr] = Field(default=None, description="Expiry date of the card.")
    __properties: ClassVar[List[str]] = ["BIN", "issuer_name", "country_code", "currency", "card_type", "card_category", "card_scheme", "card_last_four_digits", "card_expiry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Card from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Card from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BIN": obj.get("BIN"),
            "issuer_name": obj.get("issuer_name"),
            "country_code": obj.get("country_code"),
            "currency": obj.get("currency"),
            "card_type": obj.get("card_type"),
            "card_category": obj.get("card_category"),
            "card_scheme": obj.get("card_scheme"),
            "card_last_four_digits": obj.get("card_last_four_digits"),
            "card_expiry": obj.get("card_expiry")
        })
        return _obj


