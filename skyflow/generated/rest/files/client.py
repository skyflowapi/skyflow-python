# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.allow_regex import AllowRegex
from ..types.deidentify_file_response import DeidentifyFileResponse
from ..types.deidentify_status_response import DeidentifyStatusResponse
from ..types.entity_types import EntityTypes
from ..types.resource_id import ResourceId
from ..types.restrict_regex import RestrictRegex
from ..types.token_type_without_vault import TokenTypeWithoutVault
from ..types.transformations import Transformations
from ..types.uuid_ import Uuid
from ..types.vault_id import VaultId
from .raw_client import AsyncRawFilesClient, RawFilesClient
from .types.deidentify_audio_request_file import DeidentifyAudioRequestFile
from .types.deidentify_audio_request_output_transcription import DeidentifyAudioRequestOutputTranscription
from .types.deidentify_document_request_file import DeidentifyDocumentRequestFile
from .types.deidentify_file_request_file import DeidentifyFileRequestFile
from .types.deidentify_image_request_file import DeidentifyImageRequestFile
from .types.deidentify_image_request_masking_method import DeidentifyImageRequestMaskingMethod
from .types.deidentify_pdf_request_file import DeidentifyPdfRequestFile
from .types.deidentify_presentation_request_file import DeidentifyPresentationRequestFile
from .types.deidentify_spreadsheet_request_file import DeidentifySpreadsheetRequestFile
from .types.deidentify_structured_text_request_file import DeidentifyStructuredTextRequestFile
from .types.deidentify_text_request_file import DeidentifyTextRequestFile

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FilesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawFilesClient
        """
        return self._raw_client

    def deidentify_file(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyFileRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a file. This operation includes options applicable to all supported file types.<br/><br/>For more specific options, see the category-specific operations (like <a href='#deidentify_document'>De-identify Document</a>) and the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>).

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyFileRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyFileRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_file(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyFileRequestFile(
                base_64="Zm9vYmFy",
                data_format="txt",
            ),
        )
        """
        _response = self._raw_client.deidentify_file(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_document(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyDocumentRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a document file. This operation includes options applicable to all supported document file types.<br/><br/>For more specific options, see the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>) where they're available. For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyDocumentRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyDocumentRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_document(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyDocumentRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="docx",
            ),
        )
        """
        _response = self._raw_client.deidentify_document(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_pdf(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyPdfRequestFile,
        density: typing.Optional[int] = OMIT,
        max_resolution: typing.Optional[int] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a PDF file. This operation includes options specific to PDF files.<br/><br/>For broader file type support, see <a href='#deidentify_document'>De-identify Document</a> and <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyPdfRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        density : typing.Optional[int]
            Pixel density at which to process the PDF file.

        max_resolution : typing.Optional[int]
            Max resolution at which to process the PDF file.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyPdfRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_pdf(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyPdfRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
            ),
        )
        """
        _response = self._raw_client.deidentify_pdf(
            vault_id=vault_id,
            file=file,
            density=density,
            max_resolution=max_resolution,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_image(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyImageRequestFile,
        output_processed_image: typing.Optional[bool] = OMIT,
        output_ocr_text: typing.Optional[bool] = OMIT,
        masking_method: typing.Optional[DeidentifyImageRequestMaskingMethod] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from an image file. This operation includes options applicable to all supported image file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyImageRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        output_processed_image : typing.Optional[bool]
            If `true`, includes processed image in the output.

        output_ocr_text : typing.Optional[bool]
            If `true`, includes OCR text output in the response.

        masking_method : typing.Optional[DeidentifyImageRequestMaskingMethod]
            Method to mask the entities in the image.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyImageRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_image(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyImageRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="jpg",
            ),
        )
        """
        _response = self._raw_client.deidentify_image(
            vault_id=vault_id,
            file=file,
            output_processed_image=output_processed_image,
            output_ocr_text=output_ocr_text,
            masking_method=masking_method,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_text(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyTextRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a text file. This operation includes options applicable to all supported image text types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyTextRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyTextRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_text(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyTextRequestFile(
                base_64="Zm9vYmFy",
            ),
        )
        """
        _response = self._raw_client.deidentify_text(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_structured_text(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyStructuredTextRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a structured text file. This operation includes options applicable to all supported structured text file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyStructuredTextRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyStructuredTextRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_structured_text(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyStructuredTextRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="json",
            ),
        )
        """
        _response = self._raw_client.deidentify_structured_text(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_spreadsheet(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifySpreadsheetRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a spreadsheet file. This operation includes options applicable to all supported spreadsheet file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifySpreadsheetRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifySpreadsheetRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_spreadsheet(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifySpreadsheetRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="csv",
            ),
        )
        """
        _response = self._raw_client.deidentify_spreadsheet(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_presentation(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyPresentationRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a presentation file. This operation includes options applicable to all supported presentation file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyPresentationRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyPresentationRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_presentation(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyPresentationRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="pptx",
            ),
        )
        """
        _response = self._raw_client.deidentify_presentation(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def deidentify_audio(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyAudioRequestFile,
        output_processed_audio: typing.Optional[bool] = OMIT,
        output_transcription: typing.Optional[DeidentifyAudioRequestOutputTranscription] = OMIT,
        bleep_gain: typing.Optional[float] = OMIT,
        bleep_frequency: typing.Optional[float] = OMIT,
        bleep_start_padding: typing.Optional[float] = OMIT,
        bleep_stop_padding: typing.Optional[float] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from an audio file. This operation includes options applicable to all supported audio file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyAudioRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        output_processed_audio : typing.Optional[bool]
            If `true`, includes processed audio file in the response.

        output_transcription : typing.Optional[DeidentifyAudioRequestOutputTranscription]
            Type of transcription to output.

        bleep_gain : typing.Optional[float]
            Relative loudness of the bleep in dB. Positive values increase its loudness, and negative values decrease it.

        bleep_frequency : typing.Optional[float]
            The pitch of the bleep sound, in Hz. The higher the number, the higher the pitch.

        bleep_start_padding : typing.Optional[float]
            Padding added to the beginning of a bleep, in seconds.

        bleep_stop_padding : typing.Optional[float]
            Padding added to the end of a bleep, in seconds.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        from skyflow.files import DeidentifyAudioRequestFile

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.deidentify_audio(
            vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
            file=DeidentifyAudioRequestFile(
                base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                data_format="mp3",
            ),
        )
        """
        _response = self._raw_client.deidentify_audio(
            vault_id=vault_id,
            file=file,
            output_processed_audio=output_processed_audio,
            output_transcription=output_transcription,
            bleep_gain=bleep_gain,
            bleep_frequency=bleep_frequency,
            bleep_start_padding=bleep_start_padding,
            bleep_stop_padding=bleep_stop_padding,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    def get_run(
        self, run_id: Uuid, *, vault_id: ResourceId, request_options: typing.Optional[RequestOptions] = None
    ) -> DeidentifyStatusResponse:
        """
        Returns the status of the detect run.

        Parameters
        ----------
        run_id : Uuid
            ID of the detect run.

        vault_id : ResourceId
            ID of the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyStatusResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow

        client = Skyflow(
            token="YOUR_TOKEN",
        )
        client.files.get_run(
            run_id="run_id",
            vault_id="vault_id",
        )
        """
        _response = self._raw_client.get_run(run_id, vault_id=vault_id, request_options=request_options)
        return _response.data


class AsyncFilesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawFilesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawFilesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawFilesClient
        """
        return self._raw_client

    async def deidentify_file(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyFileRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a file. This operation includes options applicable to all supported file types.<br/><br/>For more specific options, see the category-specific operations (like <a href='#deidentify_document'>De-identify Document</a>) and the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>).

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyFileRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyFileRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_file(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyFileRequestFile(
                    base_64="Zm9vYmFy",
                    data_format="txt",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_file(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_document(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyDocumentRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a document file. This operation includes options applicable to all supported document file types.<br/><br/>For more specific options, see the file type-specific opertions (like <a href='#deidentify_pdf'>De-identify PDF</a>) where they're available. For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyDocumentRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyDocumentRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_document(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyDocumentRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="docx",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_document(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_pdf(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyPdfRequestFile,
        density: typing.Optional[int] = OMIT,
        max_resolution: typing.Optional[int] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a PDF file. This operation includes options specific to PDF files.<br/><br/>For broader file type support, see <a href='#deidentify_document'>De-identify Document</a> and <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyPdfRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        density : typing.Optional[int]
            Pixel density at which to process the PDF file.

        max_resolution : typing.Optional[int]
            Max resolution at which to process the PDF file.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyPdfRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_pdf(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyPdfRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_pdf(
            vault_id=vault_id,
            file=file,
            density=density,
            max_resolution=max_resolution,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_image(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyImageRequestFile,
        output_processed_image: typing.Optional[bool] = OMIT,
        output_ocr_text: typing.Optional[bool] = OMIT,
        masking_method: typing.Optional[DeidentifyImageRequestMaskingMethod] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from an image file. This operation includes options applicable to all supported image file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyImageRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        output_processed_image : typing.Optional[bool]
            If `true`, includes processed image in the output.

        output_ocr_text : typing.Optional[bool]
            If `true`, includes OCR text output in the response.

        masking_method : typing.Optional[DeidentifyImageRequestMaskingMethod]
            Method to mask the entities in the image.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyImageRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_image(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyImageRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="jpg",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_image(
            vault_id=vault_id,
            file=file,
            output_processed_image=output_processed_image,
            output_ocr_text=output_ocr_text,
            masking_method=masking_method,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_text(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyTextRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a text file. This operation includes options applicable to all supported image text types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyTextRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyTextRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_text(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyTextRequestFile(
                    base_64="Zm9vYmFy",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_text(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_structured_text(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyStructuredTextRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a structured text file. This operation includes options applicable to all supported structured text file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyStructuredTextRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyStructuredTextRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_structured_text(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyStructuredTextRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="json",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_structured_text(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_spreadsheet(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifySpreadsheetRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a spreadsheet file. This operation includes options applicable to all supported spreadsheet file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifySpreadsheetRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifySpreadsheetRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_spreadsheet(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifySpreadsheetRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="csv",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_spreadsheet(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_presentation(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyPresentationRequestFile,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from a presentation file. This operation includes options applicable to all supported presentation file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyPresentationRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyPresentationRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_presentation(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyPresentationRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="pptx",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_presentation(
            vault_id=vault_id,
            file=file,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def deidentify_audio(
        self,
        *,
        vault_id: VaultId,
        file: DeidentifyAudioRequestFile,
        output_processed_audio: typing.Optional[bool] = OMIT,
        output_transcription: typing.Optional[DeidentifyAudioRequestOutputTranscription] = OMIT,
        bleep_gain: typing.Optional[float] = OMIT,
        bleep_frequency: typing.Optional[float] = OMIT,
        bleep_start_padding: typing.Optional[float] = OMIT,
        bleep_stop_padding: typing.Optional[float] = OMIT,
        entity_types: typing.Optional[EntityTypes] = OMIT,
        token_type: typing.Optional[TokenTypeWithoutVault] = OMIT,
        allow_regex: typing.Optional[AllowRegex] = OMIT,
        restrict_regex: typing.Optional[RestrictRegex] = OMIT,
        transformations: typing.Optional[Transformations] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DeidentifyFileResponse:
        """
        De-identifies sensitive data from an audio file. This operation includes options applicable to all supported audio file types.<br/><br/>For broader file type support, see <a href='#deidentify_file'>De-identify File</a>.

        Parameters
        ----------
        vault_id : VaultId

        file : DeidentifyAudioRequestFile
            File to de-identify. Files are specified as Base64-encoded data.

        output_processed_audio : typing.Optional[bool]
            If `true`, includes processed audio file in the response.

        output_transcription : typing.Optional[DeidentifyAudioRequestOutputTranscription]
            Type of transcription to output.

        bleep_gain : typing.Optional[float]
            Relative loudness of the bleep in dB. Positive values increase its loudness, and negative values decrease it.

        bleep_frequency : typing.Optional[float]
            The pitch of the bleep sound, in Hz. The higher the number, the higher the pitch.

        bleep_start_padding : typing.Optional[float]
            Padding added to the beginning of a bleep, in seconds.

        bleep_stop_padding : typing.Optional[float]
            Padding added to the end of a bleep, in seconds.

        entity_types : typing.Optional[EntityTypes]

        token_type : typing.Optional[TokenTypeWithoutVault]

        allow_regex : typing.Optional[AllowRegex]

        restrict_regex : typing.Optional[RestrictRegex]

        transformations : typing.Optional[Transformations]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyFileResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow
        from skyflow.files import DeidentifyAudioRequestFile

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.deidentify_audio(
                vault_id="f4b3b3b33b3b3b3b3b3b3b3b3b3b3b3b",
                file=DeidentifyAudioRequestFile(
                    base_64="SGkgaSBhbSBEZXZhbnNodSwgbGl2...aW5nIGluIGNhbGlmb3JuaWEuIA==",
                    data_format="mp3",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.deidentify_audio(
            vault_id=vault_id,
            file=file,
            output_processed_audio=output_processed_audio,
            output_transcription=output_transcription,
            bleep_gain=bleep_gain,
            bleep_frequency=bleep_frequency,
            bleep_start_padding=bleep_start_padding,
            bleep_stop_padding=bleep_stop_padding,
            entity_types=entity_types,
            token_type=token_type,
            allow_regex=allow_regex,
            restrict_regex=restrict_regex,
            transformations=transformations,
            request_options=request_options,
        )
        return _response.data

    async def get_run(
        self, run_id: Uuid, *, vault_id: ResourceId, request_options: typing.Optional[RequestOptions] = None
    ) -> DeidentifyStatusResponse:
        """
        Returns the status of the detect run.

        Parameters
        ----------
        run_id : Uuid
            ID of the detect run.

        vault_id : ResourceId
            ID of the vault.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeidentifyStatusResponse
            A successful response.

        Examples
        --------
        import asyncio

        from skyflow import AsyncSkyflow

        client = AsyncSkyflow(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.files.get_run(
                run_id="run_id",
                vault_id="vault_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_run(run_id, vault_id=vault_id, request_options=request_options)
        return _response.data
