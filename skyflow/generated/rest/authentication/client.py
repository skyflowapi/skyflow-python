# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.v_1_get_auth_token_response import V1GetAuthTokenResponse
from .raw_client import AsyncRawAuthenticationClient, RawAuthenticationClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthenticationClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAuthenticationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAuthenticationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAuthenticationClient
        """
        return self._raw_client

    def authentication_service_get_auth_token(
        self,
        *,
        grant_type: str,
        assertion: str,
        subject_token: typing.Optional[str] = OMIT,
        subject_token_type: typing.Optional[str] = OMIT,
        requested_token_use: typing.Optional[str] = OMIT,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1GetAuthTokenResponse:
        """
        <p>Generates a Bearer Token to authenticate with Skyflow. This method doesn't require the <code>Authorization</code> header.</p><p><b>Note:</b> For recommended ways to authenticate, see <a href='/api-authentication/'>API authentication</a>.</p>

        Parameters
        ----------
        grant_type : str
            Grant type of the request. Set this to `urn:ietf:params:oauth:grant-type:jwt-bearer`.

        assertion : str
            User-signed JWT token that contains the following fields: <br/> <ul><li><code>iss</code>: Issuer of the JWT.</li><li><code>key</code>: Unique identifier for the key.</li><li><code>aud</code>: Recipient the JWT is intended for.</li><li><code>exp</code>: Time the JWT expires.</li><li><code>sub</code>: Subject of the JWT.</li><li><code>ctx</code>: (Optional) Value for <a href='/context-aware-overview/'>Context-aware authorization</a>.</li></ul>

        subject_token : typing.Optional[str]
            Subject token.

        subject_token_type : typing.Optional[str]
            Subject token type.

        requested_token_use : typing.Optional[str]
            Token use type. Either `delegation` or `impersonation`.

        scope : typing.Optional[str]
            Subset of available <a href='#Roles'>roles</a> to associate with the requested token. Uses the format "role:\<roleID1\> role:\<roleID2\>".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1GetAuthTokenResponse
            A successful response.

        Examples
        --------
        from skyflow import Skyflow
        client = Skyflow(token="YOUR_TOKEN", )
        client.authentication.authentication_service_get_auth_token(grant_type='urn:ietf:params:oauth:grant-type:jwt-bearer', assertion='eyLhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaXNzIjoiY29tcGFueSIsImV4cCI6MTYxNTE5MzgwNywiaWF0IjoxNjE1MTY1MDQwLCJhdWQiOiKzb21lYXVkaWVuY2UifQ.4pcPyMDQ9o1PSyXnrXCjTwXyr4BSezdI1AVTmud2fU3', )
        """
        _response = self._raw_client.authentication_service_get_auth_token(
            grant_type=grant_type,
            assertion=assertion,
            subject_token=subject_token,
            subject_token_type=subject_token_type,
            requested_token_use=requested_token_use,
            scope=scope,
            request_options=request_options,
        )
        return _response.data


class AsyncAuthenticationClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAuthenticationClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAuthenticationClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAuthenticationClient
        """
        return self._raw_client

    async def authentication_service_get_auth_token(
        self,
        *,
        grant_type: str,
        assertion: str,
        subject_token: typing.Optional[str] = OMIT,
        subject_token_type: typing.Optional[str] = OMIT,
        requested_token_use: typing.Optional[str] = OMIT,
        scope: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> V1GetAuthTokenResponse:
        """
        <p>Generates a Bearer Token to authenticate with Skyflow. This method doesn't require the <code>Authorization</code> header.</p><p><b>Note:</b> For recommended ways to authenticate, see <a href='/api-authentication/'>API authentication</a>.</p>

        Parameters
        ----------
        grant_type : str
            Grant type of the request. Set this to `urn:ietf:params:oauth:grant-type:jwt-bearer`.

        assertion : str
            User-signed JWT token that contains the following fields: <br/> <ul><li><code>iss</code>: Issuer of the JWT.</li><li><code>key</code>: Unique identifier for the key.</li><li><code>aud</code>: Recipient the JWT is intended for.</li><li><code>exp</code>: Time the JWT expires.</li><li><code>sub</code>: Subject of the JWT.</li><li><code>ctx</code>: (Optional) Value for <a href='/context-aware-overview/'>Context-aware authorization</a>.</li></ul>

        subject_token : typing.Optional[str]
            Subject token.

        subject_token_type : typing.Optional[str]
            Subject token type.

        requested_token_use : typing.Optional[str]
            Token use type. Either `delegation` or `impersonation`.

        scope : typing.Optional[str]
            Subset of available <a href='#Roles'>roles</a> to associate with the requested token. Uses the format "role:\<roleID1\> role:\<roleID2\>".

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        V1GetAuthTokenResponse
            A successful response.

        Examples
        --------
        from skyflow import AsyncSkyflow
        import asyncio
        client = AsyncSkyflow(token="YOUR_TOKEN", )
        async def main() -> None:
            await client.authentication.authentication_service_get_auth_token(grant_type='urn:ietf:params:oauth:grant-type:jwt-bearer', assertion='eyLhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaXNzIjoiY29tcGFueSIsImV4cCI6MTYxNTE5MzgwNywiaWF0IjoxNjE1MTY1MDQwLCJhdWQiOiKzb21lYXVkaWVuY2UifQ.4pcPyMDQ9o1PSyXnrXCjTwXyr4BSezdI1AVTmud2fU3', )
        asyncio.run(main())
        """
        _response = await self._raw_client.authentication_service_get_auth_token(
            grant_type=grant_type,
            assertion=assertion,
            subject_token=subject_token,
            subject_token_type=subject_token_type,
            requested_token_use=requested_token_use,
            scope=scope,
            request_options=request_options,
        )
        return _response.data
